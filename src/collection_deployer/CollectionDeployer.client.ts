/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin, StdFee } from "@cosmjs/amino";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, Addr } from "./CollectionDeployer.types";
export interface CollectionDeployerInterface {
  contractAddress: string;
  sender: string;
  createCollection721: ({
    destinationUserAddress,
    metadata,
    name,
    owner,
    royalty,
    royaltyReceiver,
    sourceChain,
    sourceNftContractAddress,
    symbol,
    tokenAmount,
    tokenId
  }: {
    destinationUserAddress: Addr;
    metadata: string;
    name: string;
    owner: string;
    royalty: number;
    royaltyReceiver: Addr;
    sourceChain: string;
    sourceNftContractAddress: string;
    symbol: string;
    tokenAmount: number;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CollectionDeployerClient implements CollectionDeployerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCollection721 = this.createCollection721.bind(this);
  }

  createCollection721 = async ({
    destinationUserAddress,
    metadata,
    name,
    owner,
    royalty,
    royaltyReceiver,
    sourceChain,
    sourceNftContractAddress,
    symbol,
    tokenAmount,
    tokenId
  }: {
    destinationUserAddress: Addr;
    metadata: string;
    name: string;
    owner: string;
    royalty: number;
    royaltyReceiver: Addr;
    sourceChain: string;
    sourceNftContractAddress: string;
    symbol: string;
    tokenAmount: number;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_collection721: {
        destination_user_address: destinationUserAddress,
        metadata,
        name,
        owner,
        royalty,
        royalty_receiver: royaltyReceiver,
        source_chain: sourceChain,
        source_nft_contract_address: sourceNftContractAddress,
        symbol,
        token_amount: tokenAmount,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}