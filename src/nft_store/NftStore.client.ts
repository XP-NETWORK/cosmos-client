/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin, StdFee } from "@cosmjs/amino";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Addr, InstantiateMsg, ExecuteMsg } from "./NftStore.types";
export interface NftStoreInterface {
  contractAddress: string;
  sender: string;
  unLockToken: ({
    to,
    tokenId
  }: {
    to: Addr;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftStoreClient implements NftStoreInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.unLockToken = this.unLockToken.bind(this);
  }

  unLockToken = async ({
    to,
    tokenId
  }: {
    to: Addr;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      un_lock_token: {
        to,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}