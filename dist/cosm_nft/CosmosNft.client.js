"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosNftClient = exports.CosmosNftQueryClient = void 0;
class CosmosNftQueryClient {
    constructor(client, contractAddress) {
        this.ownerOf = async ({ includeExpired, tokenId, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                owner_of: {
                    include_expired: includeExpired,
                    token_id: tokenId,
                },
            });
        };
        this.approval = async ({ includeExpired, spender, tokenId, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                approval: {
                    include_expired: includeExpired,
                    spender,
                    token_id: tokenId,
                },
            });
        };
        this.approvals = async ({ includeExpired, tokenId, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                approvals: {
                    include_expired: includeExpired,
                    token_id: tokenId,
                },
            });
        };
        this.operator = async ({ includeExpired, operator, owner, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                operator: {
                    include_expired: includeExpired,
                    operator,
                    owner,
                },
            });
        };
        this.allOperators = async ({ includeExpired, limit, owner, startAfter, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_operators: {
                    include_expired: includeExpired,
                    limit,
                    owner,
                    start_after: startAfter,
                },
            });
        };
        this.numTokens = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                num_tokens: {},
            });
        };
        this.contractInfo = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                contract_info: {},
            });
        };
        this.nftInfo = async ({ tokenId, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                nft_info: {
                    token_id: tokenId,
                },
            });
        };
        this.allNftInfo = async ({ includeExpired, tokenId, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_nft_info: {
                    include_expired: includeExpired,
                    token_id: tokenId,
                },
            });
        };
        this.tokens = async ({ limit, owner, startAfter, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                tokens: {
                    limit,
                    owner,
                    start_after: startAfter,
                },
            });
        };
        this.allTokens = async ({ limit, startAfter, }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_tokens: {
                    limit,
                    start_after: startAfter,
                },
            });
        };
        this.minter = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                minter: {},
            });
        };
        this.extension = async ({ msg }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                extension: {
                    msg,
                },
            });
        };
        this.ownership = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                ownership: {},
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.ownerOf = this.ownerOf.bind(this);
        this.approval = this.approval.bind(this);
        this.approvals = this.approvals.bind(this);
        this.operator = this.operator.bind(this);
        this.allOperators = this.allOperators.bind(this);
        this.numTokens = this.numTokens.bind(this);
        this.contractInfo = this.contractInfo.bind(this);
        this.nftInfo = this.nftInfo.bind(this);
        this.allNftInfo = this.allNftInfo.bind(this);
        this.tokens = this.tokens.bind(this);
        this.allTokens = this.allTokens.bind(this);
        this.minter = this.minter.bind(this);
        this.extension = this.extension.bind(this);
        this.ownership = this.ownership.bind(this);
    }
}
exports.CosmosNftQueryClient = CosmosNftQueryClient;
class CosmosNftClient extends CosmosNftQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.transferNft = async ({ recipient, tokenId, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                transfer_nft: {
                    recipient,
                    token_id: tokenId,
                },
            }, fee, memo, _funds);
        };
        this.sendNft = async ({ contract, msg, tokenId, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                send_nft: {
                    contract,
                    msg,
                    token_id: tokenId,
                },
            }, fee, memo, _funds);
        };
        this.approve = async ({ expires, spender, tokenId, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                approve: {
                    expires,
                    spender,
                    token_id: tokenId,
                },
            }, fee, memo, _funds);
        };
        this.revoke = async ({ spender, tokenId, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                revoke: {
                    spender,
                    token_id: tokenId,
                },
            }, fee, memo, _funds);
        };
        this.approveAll = async ({ expires, operator, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                approve_all: {
                    expires,
                    operator,
                },
            }, fee, memo, _funds);
        };
        this.revokeAll = async ({ operator, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                revoke_all: {
                    operator,
                },
            }, fee, memo, _funds);
        };
        this.mint = async ({ extension, owner, tokenId, tokenUri, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                mint: {
                    extension,
                    owner,
                    token_id: tokenId,
                    token_uri: tokenUri,
                },
            }, fee, memo, _funds);
        };
        this.burn = async ({ tokenId, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                burn: {
                    token_id: tokenId,
                },
            }, fee, memo, _funds);
        };
        this.extension = async ({ msg, }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                extension: {
                    msg,
                },
            }, fee, memo, _funds);
        };
        this.updateOwnership = async (action, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                update_ownership: action,
            }, fee, memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.transferNft = this.transferNft.bind(this);
        this.sendNft = this.sendNft.bind(this);
        this.approve = this.approve.bind(this);
        this.revoke = this.revoke.bind(this);
        this.approveAll = this.approveAll.bind(this);
        this.revokeAll = this.revokeAll.bind(this);
        this.mint = this.mint.bind(this);
        this.burn = this.burn.bind(this);
        this.extension = this.extension.bind(this);
        this.updateOwnership = this.updateOwnership.bind(this);
    }
}
exports.CosmosNftClient = CosmosNftClient;
//# sourceMappingURL=data:application/json;base64,