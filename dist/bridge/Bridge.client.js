"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeClient = exports.BridgeQueryClient = void 0;
class BridgeQueryClient {
    constructor(client, contractAddress) {
        this.getValidatorsCount = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_validators_count: {}
            });
        };
        this.getValidator = async ({ address }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_validator: {
                    address
                }
            });
        };
        this.getCollectionDeployer = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_collection_deployer: {}
            });
        };
        this.getStorageDeployer = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_storage_deployer: {}
            });
        };
        this.getOriginalStorage721 = async ({ chain, contractAddress }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_original_storage721: {
                    chain,
                    contract_address: contractAddress
                }
            });
        };
        this.getDuplicateStorage721 = async ({ chain, contractAddress }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_duplicate_storage721: {
                    chain,
                    contract_address: contractAddress
                }
            });
        };
        this.getOriginalToDuplicate = async ({ chain, contractAddress }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_original_to_duplicate: {
                    chain,
                    contract_address: contractAddress
                }
            });
        };
        this.getDuplicateToOriginal = async ({ chain, contractAddress }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                get_duplicate_to_original: {
                    chain,
                    contract_address: contractAddress
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.getValidatorsCount = this.getValidatorsCount.bind(this);
        this.getValidator = this.getValidator.bind(this);
        this.getCollectionDeployer = this.getCollectionDeployer.bind(this);
        this.getStorageDeployer = this.getStorageDeployer.bind(this);
        this.getOriginalStorage721 = this.getOriginalStorage721.bind(this);
        this.getDuplicateStorage721 = this.getDuplicateStorage721.bind(this);
        this.getOriginalToDuplicate = this.getOriginalToDuplicate.bind(this);
        this.getDuplicateToOriginal = this.getDuplicateToOriginal.bind(this);
    }
}
exports.BridgeQueryClient = BridgeQueryClient;
class BridgeClient extends BridgeQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.addValidator = async ({ data }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                add_validator: {
                    data
                }
            }, fee, memo, _funds);
        };
        this.claimValidatorRewards = async ({ data }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                claim_validator_rewards: {
                    data
                }
            }, fee, memo, _funds);
        };
        this.lock721 = async ({ data }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                lock721: {
                    data
                }
            }, fee, memo, _funds);
        };
        this.claim721 = async ({ data }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                claim721: {
                    data
                }
            }, fee, memo, _funds);
        };
        this.verifySig = async ({ data }, fee = "auto", memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                verify_sig: {
                    data
                }
            }, fee, memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.addValidator = this.addValidator.bind(this);
        this.claimValidatorRewards = this.claimValidatorRewards.bind(this);
        this.lock721 = this.lock721.bind(this);
        this.claim721 = this.claim721.bind(this);
        this.verifySig = this.verifySig.bind(this);
    }
}
exports.BridgeClient = BridgeClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJpZGdlLmNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icmlkZ2UvQnJpZGdlLmNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7RUFJRTs7O0FBNENGLE1BQWEsaUJBQWlCO0lBSTVCLFlBQVksTUFBc0IsRUFBRSxlQUF1QjtRQWEzRCx1QkFBa0IsR0FBRyxLQUFLLElBQXdDLEVBQUU7WUFDbEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQzFELG9CQUFvQixFQUFFLEVBQUU7YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsaUJBQVksR0FBRyxLQUFLLEVBQUUsRUFDcEIsT0FBTyxFQUdSLEVBQWlDLEVBQUU7WUFDbEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQzFELGFBQWEsRUFBRTtvQkFDYixPQUFPO2lCQUNSO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsMEJBQXFCLEdBQUcsS0FBSyxJQUE0QyxFQUFFO1lBQ3pFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUMxRCx1QkFBdUIsRUFBRSxFQUFFO2FBQzVCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUNGLHVCQUFrQixHQUFHLEtBQUssSUFBeUMsRUFBRTtZQUNuRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDMUQsb0JBQW9CLEVBQUUsRUFBRTthQUN6QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7UUFDRiwwQkFBcUIsR0FBRyxLQUFLLEVBQUUsRUFDN0IsS0FBSyxFQUNMLGVBQWUsRUFJaEIsRUFBK0IsRUFBRTtZQUNoQyxPQUFPLElB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