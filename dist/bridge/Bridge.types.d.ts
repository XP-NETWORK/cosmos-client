/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export type Binary = string;
export type Addr = string;
export interface InstantiateMsg {
    chain_type: string;
    collection721_code_id: number;
    collection_deployer_code_id: number;
    collection_label: string;
    storage721_code_id: number;
    storage_deployer_code_id: number;
    storage_label: string;
    validators: [Binary, Addr][];
}
export type ExecuteMsg = {
    add_validator: {
        data: AddValidatorMsg;
    };
} | {
    claim_validator_rewards: {
        data: ClaimValidatorRewardsMsg;
    };
} | {
    lock721: {
        data: Lock721Msg;
    };
} | {
    claim721: {
        data: ClaimMsg;
    };
} | {
    verify_sig: {
        data: VerifyMsg;
    };
};
export interface AddValidatorMsg {
    signatures: SignerAndSignature[];
    validator: [Binary, Addr];
}
export interface SignerAndSignature {
    signature: Binary;
    signer_address: Binary;
}
export interface ClaimValidatorRewardsMsg {
    signatures: SignerAndSignature[];
    validator: Binary;
}
export interface Lock721Msg {
    collection_code_id: number;
    destination_chain: string;
    destination_user_address: string;
    source_nft_contract_address: Addr;
    token_id: string;
}
export interface ClaimMsg {
    data: ClaimData;
    signatures: SignerAndSignature[];
}
export interface ClaimData {
    destination_chain: string;
    destination_user_address: Addr;
    fee: number;
    metadata: string;
    name: string;
    nft_type: string;
    royalty: number;
    royalty_receiver: Addr;
    source_chain: string;
    source_nft_contract_address: string;
    symbol: string;
    token_amount: number;
    token_id: string;
    transaction_hash: string;
}
export interface VerifyMsg {
    claim_data: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
    claim_data_as_binary: ClaimData;
    message: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
    msg_as_bindary: Binary;
    signature: Binary;
    user: Binary;
}
export type QueryMsg = {
    get_validators_count: {};
} | {
    get_validator: {
        address: Binary;
    };
} | {
    get_collection_deployer: {};
} | {
    get_storage_deployer: {};
} | {
    get_original_storage721: {
        chain: string;
        contract_address: string;
    };
} | {
    get_duplicate_storage721: {
        chain: string;
        contract_address: string;
    };
} | {
    get_original_to_duplicate: {
        chain: string;
        contract_address: string;
    };
} | {
    get_duplicate_to_original: {
        chain: string;
        contract_address: Addr;
    };
};
export interface GetCollectionDeployerResponse {
    data: Addr;
}
export interface GetStorageResponse {
    data?: Addr | null;
}
export interface GetDuplicateToOriginalResponse {
    data?: DuplicateToOriginalContractInfo | null;
}
export interface DuplicateToOriginalContractInfo {
    chain: string;
    contract_address: string;
}
export interface GetOriginalToDuplicateResponse {
    data?: OriginalToDuplicateContractInfo | null;
}
export interface OriginalToDuplicateContractInfo {
    chain: string;
    contract_address: Addr;
}
export interface GetStorageDeployerResponse {
    data: Addr;
}
export interface GetValidatorResponse {
    data?: Validator | null;
}
export interface Validator {
    added: boolean;
    address: Addr;
    pending_reward: number;
}
export interface GetValidatorCountResponse {
    count: number;
}
//# sourceMappingURL=Bridge.types.d.ts.map