/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Binary, Addr, AddValidatorMsg, ClaimValidatorRewardsMsg, Lock721Msg, ClaimMsg, VerifyMsg, GetCollectionDeployerResponse, GetStorageResponse, GetDuplicateToOriginalResponse, GetOriginalToDuplicateResponse, GetStorageDeployerResponse, GetValidatorResponse, GetValidatorCountResponse } from "./Bridge.types";
export interface BridgeReadOnlyInterface {
    contractAddress: string;
    getValidatorsCount: () => Promise<GetValidatorCountResponse>;
    getValidator: ({ address }: {
        address: Binary;
    }) => Promise<GetValidatorResponse>;
    getCollectionDeployer: () => Promise<GetCollectionDeployerResponse>;
    getStorageDeployer: () => Promise<GetStorageDeployerResponse>;
    getOriginalStorage721: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetStorageResponse>;
    getDuplicateStorage721: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetStorageResponse>;
    getOriginalToDuplicate: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetOriginalToDuplicateResponse>;
    getDuplicateToOriginal: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: Addr;
    }) => Promise<GetDuplicateToOriginalResponse>;
}
export declare class BridgeQueryClient implements BridgeReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getValidatorsCount: () => Promise<GetValidatorCountResponse>;
    getValidator: ({ address }: {
        address: Binary;
    }) => Promise<GetValidatorResponse>;
    getCollectionDeployer: () => Promise<GetCollectionDeployerResponse>;
    getStorageDeployer: () => Promise<GetStorageDeployerResponse>;
    getOriginalStorage721: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetStorageResponse>;
    getDuplicateStorage721: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetStorageResponse>;
    getOriginalToDuplicate: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: string;
    }) => Promise<GetOriginalToDuplicateResponse>;
    getDuplicateToOriginal: ({ chain, contractAddress }: {
        chain: string;
        contractAddress: Addr;
    }) => Promise<GetDuplicateToOriginalResponse>;
}
export interface BridgeInterface extends BridgeReadOnlyInterface {
    contractAddress: string;
    sender: string;
    addValidator: ({ data }: {
        data: AddValidatorMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimValidatorRewards: ({ data }: {
        data: ClaimValidatorRewardsMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    lock721: ({ data }: {
        data: Lock721Msg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim721: ({ data }: {
        data: ClaimMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    verifySig: ({ data }: {
        data: VerifyMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class BridgeClient extends BridgeQueryClient implements BridgeInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    addValidator: ({ data }: {
        data: AddValidatorMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claimValidatorRewards: ({ data }: {
        data: ClaimValidatorRewardsMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    lock721: ({ data }: {
        data: Lock721Msg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    claim721: ({ data }: {
        data: ClaimMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    verifySig: ({ data }: {
        data: VerifyMsg;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Bridge.client.d.ts.map